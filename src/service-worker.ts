/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim, WorkboxPlugin } from "workbox-core"
import { ExpirationPlugin } from "workbox-expiration"
import { precacheAndRoute, createHandlerBoundToURL } from "workbox-precaching"
import { BackgroundSyncPlugin } from "workbox-background-sync"
import { registerRoute } from "workbox-routing"
import {
  CacheFirst,
  StaleWhileRevalidate,
  NetworkOnly,
} from "workbox-strategies"
import { CacheableResponsePlugin } from "workbox-cacheable-response"
import { initialize } from "workbox-google-analytics"

declare const self: ServiceWorkerGlobalScope

clientsClaim()
initialize()

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST)

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp("/[^/?]+\\.[^/]+$")
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== "navigate") {
      return false
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith("/_")) {
      return false
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false
    }

    // Return true to signal that we want to use the handler.
    return true
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + "/index.html")
)

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) =>
    url.origin === self.location.origin && url.pathname.endsWith(".png"),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: "images",
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
)
//https://api.mapbox.com/v4/mapbox.satellite/15/26925/19469@2x.webp?sku=101YN2FF2OTGl&access_token=pk.eyJ1IjoiY2hpZCIsImEiOiJja295NHR0NjkwbXE1MnBtcGRveHk0MG4zIn0.8w-R_XkUOHzVQ0B_UoDeGQ
//https://api.mapbox.com/styles/v1/mapbox/satellite-v9?access_token=pk.eyJ1IjoiY2hpZCIsImEiOiJja295NHR0NjkwbXE1MnBtcGRveHk0MG4zIn0.8w-R_XkUOHzVQ0B_UoDeGQ
// cache map tiles
registerRoute(
  new RegExp(
    /(https:)?(\/\/([^/?#]*)?)(mapbox.com)([^?#]*)(\?([^#]*))?(#(.*))?/g
  ),
  new StaleWhileRevalidate({
    cacheName: "maptiles",
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 100 }),
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
    ],
  })
)

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener("message", (event) => {
  if (event.data && event.data.type === "SKIP_WAITING") {
    self.skipWaiting()
  }
})

self.addEventListener("fetch", (event) => {
  console.log("FETCHING EVENT IN SW", { event })
})
// Any other custom service worker logic can go here.
const bgSyncPlugin = new BackgroundSyncPlugin("fieldbookSupabaseUploads", {
  onSync: (options) => {
    console.log("bgSyncPlugin.onSync", { options })
    options.queue
      .getAll()
      .then((entries) => console.log({ entries }))
      .finally(() => options.queue.replayRequests())
  },
})

// class UpdateSynchronisedPlugin implements WorkboxPlugin {
//   constructor(name: string) {

//     this.fetchDidSucceed: (request, response) => {
//       console.log('got request and response in ')
//     }
//   }
// }

const testStuffPlugin: WorkboxPlugin = {
  fetchDidSucceed: async ({ request, response }) => {
    // Return `response` to use the network response as-is,
    // or alternatively create and return a new `Response` object.
    console.log({ fetchDidSucceed: { request, response } })
    return response
  },
  fetchDidFail: async ({ originalRequest, request, error, event }) => {
    // Return `response` to use the network response as-is,
    // or alternatively create and return a new `Response` object.
    console.log({
      fetchDidFail: { originalRequest, request, error, event },
    })
  },
}

registerRoute(
  new RegExp(
    /https?:\/\/(xrmkgudqrqkaxawylvkt.supabase.co\/rest\/v1)?(.*)?\/?(.)*/g
  ),
  new NetworkOnly({
    plugins: [bgSyncPlugin, testStuffPlugin],
  }),
  "POST"
)
